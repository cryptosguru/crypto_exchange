function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  }
  return t;
};

import * as React from 'react';
import classNames from 'classnames';
export default function Divider(_a) {
  var _classNames;

  var _a$prefixCls = _a.prefixCls,
      prefixCls = _a$prefixCls === void 0 ? 'ant' : _a$prefixCls,
      _a$type = _a.type,
      type = _a$type === void 0 ? 'horizontal' : _a$type,
      _a$orientation = _a.orientation,
      orientation = _a$orientation === void 0 ? '' : _a$orientation,
      className = _a.className,
      children = _a.children,
      dashed = _a.dashed,
      restProps = __rest(_a, ["prefixCls", "type", "orientation", "className", "children", "dashed"]);

  var orientationPrefix = orientation.length > 0 ? '-' + orientation : orientation;
  var classString = classNames(className, "".concat(prefixCls, "-divider"), "".concat(prefixCls, "-divider-").concat(type), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-divider-with-text").concat(orientationPrefix), children), _defineProperty(_classNames, "".concat(prefixCls, "-divider-dashed"), !!dashed), _classNames));
  return React.createElement("div", _extends({
    className: classString
  }, restProps), children && React.createElement("span", {
    className: "".concat(prefixCls, "-divider-inner-text")
  }, children));
}