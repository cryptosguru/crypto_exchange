{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ContainerRender from 'rc-util/es/ContainerRender';\nimport getScrollBarSize from 'rc-util/es/getScrollBarSize';\nimport { dataToArray, transitionEnd, transitionStr, addEventListener, removeEventListener, transformArguments, isNumeric } from './utils';\nvar IS_REACT_16 = 'createPortal' in ReactDOM;\nvar currentDrawer = {};\nvar windowIsUndefined = !(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nvar Drawer = function (_React$PureComponent) {\n  _inherits(Drawer, _React$PureComponent);\n\n  function Drawer(props) {\n    _classCallCheck(this, Drawer);\n\n    var _this = _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.levelDom = [];\n    _this.contentDom = null;\n    _this.maskDom = null;\n    _this.handlerdom = null;\n    _this.firstEnter = props.firstEnter; // 记录首次进入.\n\n    _this.timeout = null;\n    _this.drawerId = Number((Date.now() + Math.random()).toString().replace('.', Math.round(Math.random() * 9))).toString(16);\n    var open = props.open !== undefined ? props.open : !!props.defaultOpen;\n    currentDrawer[_this.drawerId] = open;\n    _this.state = {\n      open: open\n    };\n    return _this;\n  }\n\n  _createClass(Drawer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (!windowIsUndefined) {\n        var passiveSupported = false;\n        window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n          get: function get() {\n            passiveSupported = true;\n            return null;\n          }\n        }));\n        this.passive = passiveSupported ? {\n          passive: false\n        } : false;\n      }\n\n      var open = this.getOpen();\n\n      if (this.props.handler || open || this.firstEnter) {\n        this.getDefault(this.props);\n\n        if (open) {\n          this.isOpenChange = true;\n        }\n\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var open = nextProps.open,\n          placement = nextProps.placement;\n\n      if (open !== undefined && open !== this.props.open) {\n        this.isOpenChange = true; // 没渲染 dom 时，获取默认数据;\n\n        if (!this.container) {\n          this.getDefault(nextProps);\n        }\n\n        this.setState({\n          open: open\n        });\n      }\n\n      if (placement !== this.props.placement) {\n        // test 的 bug, 有动画过场，删除 dom\n        this.contentDom = null;\n      }\n\n      if (this.props.level !== nextProps.level) {\n        this.getParentAndLevelDom(nextProps);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      // dom 没渲染时，重走一遍。\n      if (!this.firstEnter && this.container) {\n        this.forceUpdate();\n        this.firstEnter = true;\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      delete currentDrawer[this.drawerId];\n      delete this.isOpenChange;\n\n      if (this.container) {\n        if (this.state.open) {\n          this.setLevelDomTransform(false, true);\n        }\n\n        document.body.style.overflow = ''; // 拦不住。。直接删除；\n\n        if (this.props.getContainer) {\n          this.container.parentNode.removeChild(this.container);\n        }\n      }\n\n      this.firstEnter = false;\n      clearTimeout(this.timeout); // suppport react15\n      // 需要 didmount 后也会渲染，直接 unmount 将不会渲染，加上判断.\n\n      if (this.renderComponent && !IS_REACT_16) {\n        this.renderComponent({\n          afterClose: this.removeContainer,\n          onClose: function onClose() {},\n          visible: false\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          getContainer = _props.getContainer,\n          wrapperClassName = _props.wrapperClassName;\n      var open = this.getOpen();\n      currentDrawer[this.drawerId] = open ? this.container : open;\n      var children = this.getChildToRender(this.firstEnter ? open : false);\n\n      if (!getContainer) {\n        return React.createElement('div', {\n          className: wrapperClassName,\n          ref: function ref(c) {\n            _this2.container = c;\n          }\n        }, children);\n      }\n\n      if (!this.container || !open && !this.firstEnter) {\n        return null;\n      } // suppport react15\n\n\n      if (!IS_REACT_16) {\n        return React.createElement(ContainerRender, {\n          parent: this,\n          visible: true,\n          autoMount: true,\n          autoDestroy: false,\n          getComponent: function getComponent() {\n            return children;\n          },\n          getContainer: this.getContainer\n        }, function (_ref) {\n          var renderComponent = _ref.renderComponent,\n              removeContainer = _ref.removeContainer;\n          _this2.renderComponent = renderComponent;\n          _this2.removeContainer = removeContainer;\n          return null;\n        });\n      }\n\n      return ReactDOM.createPortal(children, this.container);\n    }\n  }]);\n\n  return Drawer;\n}(React.PureComponent);\n\nDrawer.defaultProps = {\n  prefixCls: 'drawer',\n  placement: 'left',\n  getContainer: 'body',\n  level: 'all',\n  duration: '.3s',\n  ease: 'cubic-bezier(0.78, 0.14, 0.15, 0.86)',\n  onChange: function onChange() {},\n  onMaskClick: function onMaskClick() {},\n  onHandleClick: function onHandleClick() {},\n  handler: React.createElement('div', {\n    className: 'drawer-handle'\n  }, React.createElement('i', {\n    className: 'drawer-handle-icon'\n  })),\n  firstEnter: false,\n  showMask: true,\n  maskStyle: {},\n  wrapperClassName: '',\n  className: ''\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.onMaskTouchEnd = function (e) {\n    _this3.props.onMaskClick(e);\n\n    _this3.onTouchEnd(e, true);\n  };\n\n  this.onIconTouchEnd = function (e) {\n    _this3.props.onHandleClick(e);\n\n    _this3.onTouchEnd(e);\n  };\n\n  this.onTouchEnd = function (e, close) {\n    if (_this3.props.open !== undefined) {\n      return;\n    }\n\n    var open = close || _this3.state.open;\n    _this3.isOpenChange = true;\n\n    _this3.setState({\n      open: !open\n    });\n  };\n\n  this.onWrapperTransitionEnd = function (e) {\n    if (e.target === _this3.contentWrapper) {\n      _this3.dom.style.transition = '';\n\n      if (!_this3.state.open && _this3.getCurrentDrawerSome()) {\n        document.body.style.overflowX = '';\n\n        if (_this3.maskDom) {\n          _this3.maskDom.style.left = '';\n          _this3.maskDom.style.width = '';\n        }\n      }\n    }\n  };\n\n  this.getDefault = function (props) {\n    _this3.getParentAndLevelDom(props);\n\n    if (props.getContainer || props.parent) {\n      _this3.container = _this3.defaultGetContainer();\n    }\n  };\n\n  this.getCurrentDrawerSome = function () {\n    return !Object.keys(currentDrawer).some(function (key) {\n      return currentDrawer[key];\n    });\n  };\n\n  this.getContainer = function () {\n    return _this3.container;\n  };\n\n  this.getParentAndLevelDom = function (props) {\n    if (windowIsUndefined) {\n      return;\n    }\n\n    var level = props.level,\n        getContainer = props.getContainer;\n    _this3.levelDom = [];\n\n    if (getContainer) {\n      if (typeof getContainer === 'string') {\n        var dom = document.querySelectorAll(getContainer)[0];\n        _this3.parent = dom;\n      }\n\n      if (typeof getContainer === 'function') {\n        _this3.parent = getContainer();\n      }\n\n      if (typeof getContainer === 'object' && getContainer instanceof window.HTMLElement) {\n        _this3.parent = getContainer;\n      }\n    }\n\n    if (!getContainer && _this3.container) {\n      _this3.parent = _this3.container.parentNode;\n    }\n\n    if (level === 'all') {\n      var children = Array.prototype.slice.call(_this3.parent.children);\n      children.forEach(function (child) {\n        if (child.nodeName !== 'SCRIPT' && child.nodeName !== 'STYLE' && child.nodeName !== 'LINK' && child !== _this3.container) {\n          _this3.levelDom.push(child);\n        }\n      });\n    } else if (level) {\n      dataToArray(level).forEach(function (key) {\n        document.querySelectorAll(key).forEach(function (item) {\n          _this3.levelDom.push(item);\n        });\n      });\n    }\n  };\n\n  this.setLevelDomTransform = function (open, openTransition, placementName, value) {\n    var _props2 = _this3.props,\n        placement = _props2.placement,\n        levelMove = _props2.levelMove,\n        duration = _props2.duration,\n        ease = _props2.ease,\n        onChange = _props2.onChange,\n        getContainer = _props2.getContainer;\n\n    if (!windowIsUndefined) {\n      _this3.levelDom.forEach(function (dom) {\n        if (_this3.isOpenChange || openTransition) {\n          /* eslint no-param-reassign: \"error\" */\n          dom.style.transition = 'transform ' + duration + ' ' + ease;\n          addEventListener(dom, transitionEnd, _this3.transitionEnd);\n          var levelValue = open ? value : 0;\n\n          if (levelMove) {\n            var $levelMove = transformArguments(levelMove, {\n              target: dom,\n              open: open\n            });\n            levelValue = open ? $levelMove[0] : $levelMove[1] || 0;\n          }\n\n          var $value = typeof levelValue === 'number' ? levelValue + 'px' : levelValue;\n          var placementPos = placement === 'left' || placement === 'top' ? $value : '-' + $value;\n          dom.style.transform = levelValue ? placementName + '(' + placementPos + ')' : '';\n          dom.style.msTransform = levelValue ? placementName + '(' + placementPos + ')' : '';\n        }\n      }); // 处理 body 滚动\n\n\n      if (getContainer === 'body') {\n        var eventArray = ['touchstart'];\n        var domArray = [document.body, _this3.maskDom, _this3.handlerdom, _this3.contentDom];\n        var right = document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth ? getScrollBarSize(1) : 0;\n        var widthTransition = 'width ' + duration + ' ' + ease;\n        var trannsformTransition = 'transform ' + duration + ' ' + ease;\n\n        if (open && document.body.style.overflow !== 'hidden') {\n          document.body.style.overflow = 'hidden';\n\n          if (right) {\n            document.body.style.position = 'relative';\n            document.body.style.width = 'calc(100% - ' + right + 'px)';\n            _this3.dom.style.transition = 'none';\n\n            switch (placement) {\n              case 'right':\n                _this3.dom.style.transform = 'translateX(-' + right + 'px)';\n                _this3.dom.style.msTransform = 'translateX(-' + right + 'px)';\n                break;\n\n              case 'top':\n              case 'bottom':\n                _this3.dom.style.width = 'calc(100% - ' + right + 'px)';\n                _this3.dom.style.transform = 'translateZ(0)';\n                break;\n\n              default:\n                break;\n            }\n\n            clearTimeout(_this3.timeout);\n            _this3.timeout = setTimeout(function () {\n              _this3.dom.style.transition = trannsformTransition + ',' + widthTransition;\n              _this3.dom.style.width = '';\n              _this3.dom.style.transform = '';\n              _this3.dom.style.msTransform = '';\n            });\n          } // 手机禁滚\n\n\n          domArray.forEach(function (item, i) {\n            if (!item) {\n              return;\n            }\n\n            addEventListener(item, eventArray[i] || 'touchmove', i ? _this3.removeMoveHandler : _this3.removeStartHandler, _this3.passive);\n          });\n        } else if (_this3.getCurrentDrawerSome()) {\n          document.body.style.overflow = '';\n\n          if ((_this3.isOpenChange || openTransition) && right) {\n            document.body.style.position = '';\n            document.body.style.width = '';\n\n            if (transitionStr) {\n              document.body.style.overflowX = 'hidden';\n            }\n\n            _this3.dom.style.transition = 'none';\n            var heightTransition = void 0;\n\n            switch (placement) {\n              case 'right':\n                {\n                  _this3.dom.style.transform = 'translateX(' + right + 'px)';\n                  _this3.dom.style.msTransform = 'translateX(' + right + 'px)';\n                  _this3.dom.style.width = '100%';\n                  widthTransition = 'width 0s ' + ease + ' ' + duration;\n\n                  if (_this3.maskDom) {\n                    _this3.maskDom.style.left = '-' + right + 'px';\n                    _this3.maskDom.style.width = 'calc(100% + ' + right + 'px)';\n                  }\n\n                  break;\n                }\n\n              case 'top':\n              case 'bottom':\n                {\n                  _this3.dom.style.width = 'calc(100% + ' + right + 'px)';\n                  _this3.dom.style.height = '100%';\n                  _this3.dom.style.transform = 'translateZ(0)';\n                  heightTransition = 'height 0s ' + ease + ' ' + duration;\n                  break;\n                }\n\n              default:\n                break;\n            }\n\n            clearTimeout(_this3.timeout);\n            _this3.timeout = setTimeout(function () {\n              _this3.dom.style.transition = trannsformTransition + ',' + (heightTransition ? heightTransition + ',' : '') + widthTransition;\n              _this3.dom.style.transform = '';\n              _this3.dom.style.msTransform = '';\n              _this3.dom.style.width = '';\n              _this3.dom.style.height = '';\n            });\n          }\n\n          domArray.forEach(function (item, i) {\n            if (!item) {\n              return;\n            }\n\n            removeEventListener(item, eventArray[i] || 'touchmove', i ? _this3.removeMoveHandler : _this3.removeStartHandler, _this3.passive);\n          });\n        }\n      }\n    }\n\n    if (onChange && _this3.isOpenChange && _this3.firstEnter) {\n      onChange(open);\n      _this3.isOpenChange = false;\n    }\n  };\n\n  this.getChildToRender = function (open) {\n    var _classnames;\n\n    var _props3 = _this3.props,\n        className = _props3.className,\n        prefixCls = _props3.prefixCls,\n        style = _props3.style,\n        placement = _props3.placement,\n        children = _props3.children,\n        handler = _props3.handler,\n        showMask = _props3.showMask,\n        maskStyle = _props3.maskStyle,\n        width = _props3.width,\n        height = _props3.height;\n    var wrapperClassname = classnames(prefixCls, (_classnames = {}, _defineProperty(_classnames, prefixCls + '-' + placement, true), _defineProperty(_classnames, prefixCls + '-open', open), _defineProperty(_classnames, className, !!className), _classnames));\n    var isOpenChange = _this3.isOpenChange;\n    var isHorizontal = placement === 'left' || placement === 'right';\n    var placementName = 'translate' + (isHorizontal ? 'X' : 'Y'); // 百分比与像素动画不同步，第一次打用后全用像素动画。\n    // const defaultValue = !this.contentDom || !level ? '100%' : `${value}px`;\n\n    var placementPos = placement === 'left' || placement === 'top' ? '-100%' : '100%';\n    var transform = open ? '' : placementName + '(' + placementPos + ')';\n\n    if (isOpenChange === undefined || isOpenChange) {\n      var contentValue = _this3.contentDom ? _this3.contentDom.getBoundingClientRect()[isHorizontal ? 'width' : 'height'] : 0;\n      var value = (isHorizontal ? width : height) || contentValue;\n\n      _this3.setLevelDomTransform(open, false, placementName, value);\n    }\n\n    var handlerChildren = handler && React.cloneElement(handler, {\n      onClick: function onClick(e) {\n        if (handler.props.onClick) {\n          handler.props.onClick();\n        }\n\n        _this3.onIconTouchEnd(e);\n      },\n      ref: function ref(c) {\n        _this3.handlerdom = c;\n      }\n    });\n    return React.createElement('div', {\n      className: wrapperClassname,\n      style: style,\n      ref: function ref(c) {\n        _this3.dom = c;\n      },\n      onTransitionEnd: _this3.onWrapperTransitionEnd\n    }, showMask && React.createElement('div', {\n      className: prefixCls + '-mask',\n      onClick: _this3.onMaskTouchEnd,\n      style: maskStyle,\n      ref: function ref(c) {\n        _this3.maskDom = c;\n      }\n    }), React.createElement('div', {\n      className: prefixCls + '-content-wrapper',\n      style: {\n        transform: transform,\n        msTransform: transform,\n        width: isNumeric(width) ? width + 'px' : width,\n        height: isNumeric(height) ? height + 'px' : height\n      },\n      ref: function ref(c) {\n        _this3.contentWrapper = c;\n      }\n    }, React.createElement('div', {\n      className: prefixCls + '-content',\n      ref: function ref(c) {\n        _this3.contentDom = c;\n      },\n      onTouchStart: open ? _this3.removeStartHandler : null // 跑用例用\n      ,\n      onTouchMove: open ? _this3.removeMoveHandler : null // 跑用例用\n\n    }, children), handlerChildren));\n  };\n\n  this.getOpen = function () {\n    return _this3.props.open !== undefined ? _this3.props.open : _this3.state.open;\n  };\n\n  this.getTouchParentScroll = function (root, currentTarget, differX, differY) {\n    if (!currentTarget || currentTarget === document) {\n      return false;\n    } // root 为 drawer-content 设定了 overflow, 判断为 root 的 parent 时结束滚动；\n\n\n    if (currentTarget === root.parentNode) {\n      return true;\n    }\n\n    var isY = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differY);\n    var isX = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differX);\n    var scrollY = currentTarget.scrollHeight - currentTarget.clientHeight;\n    var scrollX = currentTarget.scrollWidth - currentTarget.clientWidth;\n    /**\n     * <div style=\"height: 300px\">\n     *   <div style=\"height: 900px\"></div>\n     * </div>\n     * 在没设定 overflow: auto 或 scroll 时，currentTarget 里获取不到 scrollTop 或 scrollLeft,\n     * 预先用 scrollTo 来滚动，如果取出的值跟滚动前取出不同，则 currnetTarget 被设定了 overflow; 否则就是上面这种。\n     */\n\n    var t = currentTarget.scrollTop;\n    var l = currentTarget.scrollLeft;\n\n    if (currentTarget.scrollTo) {\n      currentTarget.scrollTo(currentTarget.scrollLeft + 1, currentTarget.scrollTop + 1);\n    }\n\n    var currentT = currentTarget.scrollTop;\n    var currentL = currentTarget.scrollLeft;\n\n    if (currentTarget.scrollTo) {\n      currentTarget.scrollTo(currentTarget.scrollLeft - 1, currentTarget.scrollTop - 1);\n    }\n\n    if (isY && (!scrollY || !(currentT - t) || scrollY && (currentTarget.scrollTop >= scrollY && differY < 0 || currentTarget.scrollTop <= 0 && differY > 0)) || isX && (!scrollX || !(currentL - l) || scrollX && (currentTarget.scrollLeft >= scrollX && differX < 0 || currentTarget.scrollLeft <= 0 && differX > 0))) {\n      return _this3.getTouchParentScroll(root, currentTarget.parentNode, differX, differY);\n    }\n\n    return false;\n  };\n\n  this.removeStartHandler = function (e) {\n    if (e.touches.length > 1) {\n      return;\n    }\n\n    _this3.startPos = {\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    };\n  };\n\n  this.removeMoveHandler = function (e) {\n    if (e.changedTouches.length > 1) {\n      return;\n    }\n\n    var currentTarget = e.currentTarget;\n    var differX = e.changedTouches[0].clientX - _this3.startPos.x;\n    var differY = e.changedTouches[0].clientY - _this3.startPos.y;\n\n    if (currentTarget === _this3.maskDom || currentTarget === _this3.handlerdom || currentTarget === _this3.contentDom && _this3.getTouchParentScroll(currentTarget, e.target, differX, differY)) {\n      e.preventDefault();\n    }\n  };\n\n  this.transitionEnd = function (e) {\n    removeEventListener(e.target, transitionEnd, _this3.transitionEnd);\n    e.target.style.transition = '';\n  };\n\n  this.defaultGetContainer = function () {\n    if (windowIsUndefined) {\n      return null;\n    }\n\n    var container = document.createElement('div');\n\n    _this3.parent.appendChild(container);\n\n    if (_this3.props.wrapperClassName) {\n      container.className = _this3.props.wrapperClassName;\n    }\n\n    return container;\n  };\n};\n\nDrawer.propTypes = {\n  wrapperClassName: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  style: PropTypes.object,\n  width: PropTypes.any,\n  height: PropTypes.any,\n  defaultOpen: PropTypes.bool,\n  firstEnter: PropTypes.bool,\n  open: PropTypes.bool,\n  prefixCls: PropTypes.string,\n  placement: PropTypes.string,\n  level: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  levelMove: PropTypes.oneOfType([PropTypes.number, PropTypes.func, PropTypes.array]),\n  ease: PropTypes.string,\n  duration: PropTypes.string,\n  getContainer: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object, PropTypes.bool]),\n  handler: PropTypes.any,\n  onChange: PropTypes.func,\n  onMaskClick: PropTypes.func,\n  onHandleClick: PropTypes.func,\n  showMask: PropTypes.bool,\n  maskStyle: PropTypes.object\n};\nexport default Drawer;","map":null,"metadata":{},"sourceType":"module"}