{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar Star = function (_React$Component) {\n  _inherits(Star, _React$Component);\n\n  function Star() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Star);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onHover = function (e) {\n      var _this$props = _this.props,\n          onHover = _this$props.onHover,\n          index = _this$props.index;\n      onHover(e, index);\n    }, _this.onClick = function (e) {\n      var _this$props2 = _this.props,\n          onClick = _this$props2.onClick,\n          index = _this$props2.index;\n      onClick(e, index);\n    }, _this.onKeyDown = function (e) {\n      var _this$props3 = _this.props,\n          onClick = _this$props3.onClick,\n          index = _this$props3.index;\n\n      if (e.keyCode === 13) {\n        onClick(e, index);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Star.prototype.getClassName = function getClassName() {\n    var _props = this.props,\n        prefixCls = _props.prefixCls,\n        index = _props.index,\n        value = _props.value,\n        allowHalf = _props.allowHalf,\n        focused = _props.focused;\n    var starValue = index + 1;\n    var className = prefixCls;\n\n    if (value === 0 && index === 0 && focused) {\n      className += ' ' + prefixCls + '-focused';\n    } else if (allowHalf && value + 0.5 === starValue) {\n      className += ' ' + prefixCls + '-half ' + prefixCls + '-active';\n\n      if (focused) {\n        className += ' ' + prefixCls + '-focused';\n      }\n    } else {\n      className += starValue <= value ? ' ' + prefixCls + '-full' : ' ' + prefixCls + '-zero';\n\n      if (starValue === value && focused) {\n        className += ' ' + prefixCls + '-focused';\n      }\n    }\n\n    return className;\n  };\n\n  Star.prototype.render = function render() {\n    var onHover = this.onHover,\n        onClick = this.onClick,\n        onKeyDown = this.onKeyDown;\n    var _props2 = this.props,\n        disabled = _props2.disabled,\n        prefixCls = _props2.prefixCls,\n        character = _props2.character,\n        index = _props2.index,\n        count = _props2.count,\n        value = _props2.value;\n    return React.createElement('li', {\n      className: this.getClassName(),\n      onClick: disabled ? null : onClick,\n      onKeyDown: disabled ? null : onKeyDown,\n      onMouseMove: disabled ? null : onHover,\n      role: 'radio',\n      'aria-checked': value > index ? 'true' : 'false',\n      'aria-posinset': index + 1,\n      'aria-setsize': count,\n      tabIndex: 0\n    }, React.createElement('div', {\n      className: prefixCls + '-first'\n    }, character), React.createElement('div', {\n      className: prefixCls + '-second'\n    }, character));\n  };\n\n  return Star;\n}(React.Component);\n\nStar.propTypes = {\n  value: PropTypes.number,\n  index: PropTypes.number,\n  prefixCls: PropTypes.string,\n  allowHalf: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  character: PropTypes.node,\n  focused: PropTypes.bool,\n  count: PropTypes.number\n};\nexport default Star;","map":null,"metadata":{},"sourceType":"module"}