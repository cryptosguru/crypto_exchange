{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\nimport KeyCode from 'rc-util/es/KeyCode';\nimport DateTable from './date/DateTable';\nimport CalendarHeader from './calendar/CalendarHeader';\nimport CalendarFooter from './calendar/CalendarFooter';\nimport CalendarMixin from './mixin/CalendarMixin';\nimport CommonMixin from './mixin/CommonMixin';\nimport DateInput from './date/DateInput';\nimport { getTimeConfig, getTodayTime, syncTime } from './util';\nimport { goStartMonth, goEndMonth, goTime as _goTime } from './util/toTime';\n\nfunction noop() {}\n\nvar Calendar = createReactClass({\n  displayName: 'Calendar',\n  propTypes: {\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    defaultValue: PropTypes.object,\n    value: PropTypes.object,\n    selectedValue: PropTypes.object,\n    mode: PropTypes.oneOf(['time', 'date', 'month', 'year', 'decade']),\n    locale: PropTypes.object,\n    showDateInput: PropTypes.bool,\n    showWeekNumber: PropTypes.bool,\n    showToday: PropTypes.bool,\n    showOk: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onOk: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    timePicker: PropTypes.element,\n    dateInputPlaceholder: PropTypes.any,\n    onClear: PropTypes.func,\n    onChange: PropTypes.func,\n    onPanelChange: PropTypes.func,\n    disabledDate: PropTypes.func,\n    disabledTime: PropTypes.any,\n    dateRender: PropTypes.func,\n    renderFooter: PropTypes.func,\n    renderSidebar: PropTypes.func,\n    clearIcon: PropTypes.node\n  },\n  mixins: [CommonMixin, CalendarMixin],\n  getDefaultProps: function getDefaultProps() {\n    return {\n      showToday: true,\n      showDateInput: true,\n      timePicker: null,\n      onOk: noop,\n      onPanelChange: noop\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      mode: this.props.mode || 'date'\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    if ('mode' in nextProps && this.state.mode !== nextProps.mode) {\n      this.setState({\n        mode: nextProps.mode\n      });\n    }\n  },\n  onKeyDown: function onKeyDown(event) {\n    if (event.target.nodeName.toLowerCase() === 'input') {\n      return undefined;\n    }\n\n    var keyCode = event.keyCode; // mac\n\n    var ctrlKey = event.ctrlKey || event.metaKey;\n    var disabledDate = this.props.disabledDate;\n    var value = this.state.value;\n\n    switch (keyCode) {\n      case KeyCode.DOWN:\n        this.goTime(1, 'weeks');\n        event.preventDefault();\n        return 1;\n\n      case KeyCode.UP:\n        this.goTime(-1, 'weeks');\n        event.preventDefault();\n        return 1;\n\n      case KeyCode.LEFT:\n        if (ctrlKey) {\n          this.goTime(-1, 'years');\n        } else {\n          this.goTime(-1, 'days');\n        }\n\n        event.preventDefault();\n        return 1;\n\n      case KeyCode.RIGHT:\n        if (ctrlKey) {\n          this.goTime(1, 'years');\n        } else {\n          this.goTime(1, 'days');\n        }\n\n        event.preventDefault();\n        return 1;\n\n      case KeyCode.HOME:\n        this.setValue(goStartMonth(this.state.value));\n        event.preventDefault();\n        return 1;\n\n      case KeyCode.END:\n        this.setValue(goEndMonth(this.state.value));\n        event.preventDefault();\n        return 1;\n\n      case KeyCode.PAGE_DOWN:\n        this.goTime(1, 'month');\n        event.preventDefault();\n        return 1;\n\n      case KeyCode.PAGE_UP:\n        this.goTime(-1, 'month');\n        event.preventDefault();\n        return 1;\n\n      case KeyCode.ENTER:\n        if (!disabledDate || !disabledDate(value)) {\n          this.onSelect(value, {\n            source: 'keyboard'\n          });\n        }\n\n        event.preventDefault();\n        return 1;\n\n      default:\n        this.props.onKeyDown(event);\n        return 1;\n    }\n  },\n  onClear: function onClear() {\n    this.onSelect(null);\n    this.props.onClear();\n  },\n  onOk: function onOk() {\n    var selectedValue = this.state.selectedValue;\n\n    if (this.isAllowedDate(selectedValue)) {\n      this.props.onOk(selectedValue);\n    }\n  },\n  onDateInputChange: function onDateInputChange(value) {\n    this.onSelect(value, {\n      source: 'dateInput'\n    });\n  },\n  onDateTableSelect: function onDateTableSelect(value) {\n    var timePicker = this.props.timePicker;\n    var selectedValue = this.state.selectedValue;\n\n    if (!selectedValue && timePicker) {\n      var timePickerDefaultValue = timePicker.props.defaultValue;\n\n      if (timePickerDefaultValue) {\n        syncTime(timePickerDefaultValue, value);\n      }\n    }\n\n    this.onSelect(value);\n  },\n  onToday: function onToday() {\n    var value = this.state.value;\n    var now = getTodayTime(value);\n    this.onSelect(now, {\n      source: 'todayButton'\n    });\n  },\n  onPanelChange: function onPanelChange(value, mode) {\n    var props = this.props,\n        state = this.state;\n\n    if (!('mode' in props)) {\n      this.setState({\n        mode: mode\n      });\n    }\n\n    props.onPanelChange(value || state.value, mode);\n  },\n  getRootDOMNode: function getRootDOMNode() {\n    return ReactDOM.findDOMNode(this);\n  },\n  openTimePicker: function openTimePicker() {\n    this.onPanelChange(null, 'time');\n  },\n  closeTimePicker: function closeTimePicker() {\n    this.onPanelChange(null, 'date');\n  },\n  goTime: function goTime(direction, unit) {\n    this.setValue(_goTime(this.state.value, direction, unit));\n  },\n  render: function render() {\n    var props = this.props,\n        state = this.state;\n    var locale = props.locale,\n        prefixCls = props.prefixCls,\n        disabledDate = props.disabledDate,\n        dateInputPlaceholder = props.dateInputPlaceholder,\n        timePicker = props.timePicker,\n        disabledTime = props.disabledTime,\n        clearIcon = props.clearIcon;\n    var value = state.value,\n        selectedValue = state.selectedValue,\n        mode = state.mode;\n    var showTimePicker = mode === 'time';\n    var disabledTimeConfig = showTimePicker && disabledTime && timePicker ? getTimeConfig(selectedValue, disabledTime) : null;\n    var timePickerEle = null;\n\n    if (timePicker && showTimePicker) {\n      var timePickerProps = _extends({\n        showHour: true,\n        showSecond: true,\n        showMinute: true\n      }, timePicker.props, disabledTimeConfig, {\n        onChange: this.onDateInputChange,\n        value: selectedValue,\n        disabledTime: disabledTime\n      });\n\n      if (timePicker.props.defaultValue !== undefined) {\n        timePickerProps.defaultOpenValue = timePicker.props.defaultValue;\n      }\n\n      timePickerEle = React.cloneElement(timePicker, timePickerProps);\n    }\n\n    var dateInputElement = props.showDateInput ? React.createElement(DateInput, {\n      format: this.getFormat(),\n      key: 'date-input',\n      value: value,\n      locale: locale,\n      placeholder: dateInputPlaceholder,\n      showClear: true,\n      disabledTime: disabledTime,\n      disabledDate: disabledDate,\n      onClear: this.onClear,\n      prefixCls: prefixCls,\n      selectedValue: selectedValue,\n      onChange: this.onDateInputChange,\n      clearIcon: clearIcon\n    }) : null;\n    var children = [props.renderSidebar(), React.createElement('div', {\n      className: prefixCls + '-panel',\n      key: 'panel'\n    }, dateInputElement, React.createElement('div', {\n      className: prefixCls + '-date-panel'\n    }, React.createElement(CalendarHeader, {\n      locale: locale,\n      mode: mode,\n      value: value,\n      onValueChange: this.setValue,\n      onPanelChange: this.onPanelChange,\n      showTimePicker: showTimePicker,\n      prefixCls: prefixCls\n    }), timePicker && showTimePicker ? React.createElement('div', {\n      className: prefixCls + '-time-picker'\n    }, React.createElement('div', {\n      className: prefixCls + '-time-picker-panel'\n    }, timePickerEle)) : null, React.createElement('div', {\n      className: prefixCls + '-body'\n    }, React.createElement(DateTable, {\n      locale: locale,\n      value: value,\n      selectedValue: selectedValue,\n      prefixCls: prefixCls,\n      dateRender: props.dateRender,\n      onSelect: this.onDateTableSelect,\n      disabledDate: disabledDate,\n      showWeekNumber: props.showWeekNumber\n    })), React.createElement(CalendarFooter, {\n      showOk: props.showOk,\n      renderFooter: props.renderFooter,\n      locale: locale,\n      prefixCls: prefixCls,\n      showToday: props.showToday,\n      disabledTime: disabledTime,\n      showTimePicker: showTimePicker,\n      showDateInput: props.showDateInput,\n      timePicker: timePicker,\n      selectedValue: selectedValue,\n      value: value,\n      disabledDate: disabledDate,\n      okDisabled: props.showOk !== false && (!selectedValue || !this.isAllowedDate(selectedValue)),\n      onOk: this.onOk,\n      onSelect: this.onSelect,\n      onToday: this.onToday,\n      onOpenTimePicker: this.openTimePicker,\n      onCloseTimePicker: this.closeTimePicker\n    })))];\n    return this.renderRoot({\n      children: children,\n      className: props.showWeekNumber ? prefixCls + '-week-number' : ''\n    });\n  }\n});\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}