{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nexport default function Divider(_a) {\n  var _classNames;\n\n  var _a$prefixCls = _a.prefixCls,\n      prefixCls = _a$prefixCls === void 0 ? 'ant' : _a$prefixCls,\n      _a$type = _a.type,\n      type = _a$type === void 0 ? 'horizontal' : _a$type,\n      _a$orientation = _a.orientation,\n      orientation = _a$orientation === void 0 ? '' : _a$orientation,\n      className = _a.className,\n      children = _a.children,\n      dashed = _a.dashed,\n      restProps = __rest(_a, [\"prefixCls\", \"type\", \"orientation\", \"className\", \"children\", \"dashed\"]);\n\n  var orientationPrefix = orientation.length > 0 ? '-' + orientation : orientation;\n  var classString = classNames(className, \"\".concat(prefixCls, \"-divider\"), \"\".concat(prefixCls, \"-divider-\").concat(type), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-divider-with-text\").concat(orientationPrefix), children), _defineProperty(_classNames, \"\".concat(prefixCls, \"-divider-dashed\"), !!dashed), _classNames));\n  return React.createElement(\"div\", _extends({\n    className: classString\n  }, restProps), children && React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-divider-inner-text\")\n  }, children));\n}","map":null,"metadata":{},"sourceType":"module"}