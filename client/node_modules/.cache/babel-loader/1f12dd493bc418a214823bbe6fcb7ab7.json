{"ast":null,"code":"import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport KeyCode from 'rc-util/es/KeyCode';\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport SelectTrigger from './SelectTrigger';\nimport { selectorContextTypes } from './Base/BaseSelector';\nimport { popupContextTypes } from './Base/BasePopup';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector, { multipleSelectorContextTypes } from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue, getFilterTree, cleanEntity } from './util';\nimport { valueProp } from './propTypes';\nimport SelectNode from './SelectNode';\n\nvar Select = function (_React$Component) {\n  _inherits(Select, _React$Component);\n\n  function Select(props) {\n    _classCallCheck(this, Select);\n\n    var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var prefixAria = props.prefixAria,\n        defaultOpen = props.defaultOpen,\n        open = props.open;\n    _this.state = {\n      open: open || defaultOpen,\n      valueList: [],\n      searchHalfCheckedKeys: [],\n      missValueList: [],\n      // Contains the value not in the tree\n      selectorValueList: [],\n      // Used for multiple selector\n      valueEntities: {},\n      keyEntities: {},\n      searchValue: '',\n      init: true\n    };\n    _this.selectorRef = createRef();\n    _this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    _this.ariaId = generateAriaId(prefixAria + '-list');\n    return _this;\n  }\n\n  _createClass(Select, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        rcTreeSelect: {\n          onSelectorFocus: this.onSelectorFocus,\n          onSelectorBlur: this.onSelectorBlur,\n          onSelectorKeyDown: this.onComponentKeyDown,\n          onSelectorClear: this.onSelectorClear,\n          onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n          onTreeNodeSelect: this.onTreeNodeSelect,\n          onTreeNodeCheck: this.onTreeNodeCheck,\n          onPopupKeyDown: this.onComponentKeyDown,\n          onSearchInputChange: this.onSearchInputChange,\n          onSearchInputKeyDown: this.onSearchInputKeyDown\n        }\n      };\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          autoFocus = _props.autoFocus,\n          disabled = _props.disabled;\n\n      if (autoFocus && !disabled) {\n        this.focus();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(_, prevState) {\n      if (prevState.valueList !== this.state.valueList) {\n        this.forcePopupAlign();\n      }\n    } // ==================== Selector ====================\n    // Handle key board event in both Selector and Popup\n    // ===================== Popup ======================\n    // ==================== Trigger =====================\n\n    /**\n     * Only update the value which is not in props\n     */\n    // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`\n    // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.\n    // `documentClickClose` is not accurate anymore. Let's just keep the key word.\n    // Tree checkable is also a multiple case\n    // [Legacy] To align with `Select` component,\n    // We use `searchValue` instead of `inputValue`\n    // but currently still need support that.\n    // Add this method the check if is controlled\n\n    /**\n     * 1. Update state valueList.\n     * 2. Fire `onChange` event to user.\n     */\n\n  }, {\n    key: 'focus',\n    value: function focus() {\n      this.selectorRef.current.focus();\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      this.selectorRef.current.blur();\n    } // ===================== Render =====================\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _state = this.state,\n          valueList = _state.valueList,\n          missValueList = _state.missValueList,\n          selectorValueList = _state.selectorValueList,\n          searchHalfCheckedKeys = _state.searchHalfCheckedKeys,\n          valueEntities = _state.valueEntities,\n          keyEntities = _state.keyEntities,\n          searchValue = _state.searchValue,\n          open = _state.open,\n          focused = _state.focused,\n          treeNodes = _state.treeNodes,\n          filteredTreeNodes = _state.filteredTreeNodes;\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          treeExpandedKeys = _props2.treeExpandedKeys,\n          onTreeExpand = _props2.onTreeExpand;\n      var isMultiple = this.isMultiple();\n\n      var passProps = _extends({}, this.props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(),\n        // Perf save\n        open: open,\n        focused: focused,\n        onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n        dropdownPrefixCls: prefixCls + '-dropdown',\n        ariaId: this.ariaId\n      });\n\n      var Popup = isMultiple ? MultiplePopup : SinglePopup;\n      var $popup = React.createElement(Popup, _extends({}, passProps, {\n        onTreeExpanded: this.delayForcePopupAlign,\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes // Tree expanded control\n        ,\n        treeExpandedKeys: treeExpandedKeys,\n        onTreeExpand: onTreeExpand\n      }));\n      var Selector = isMultiple ? MultipleSelector : SingleSelector;\n      var $selector = React.createElement(Selector, _extends({}, passProps, {\n        ref: this.selectorRef\n      }));\n      return React.createElement(SelectTrigger, _extends({}, passProps, {\n        ref: this.selectTriggerRef,\n        popupElement: $popup,\n        onKeyDown: this.onKeyDown,\n        onDropdownVisibleChange: this.onDropdownVisibleChange\n      }), $selector);\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _prevState$prevProps = prevState.prevProps,\n          prevProps = _prevState$prevProps === undefined ? {} : _prevState$prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        prevProps: nextProps,\n        init: false\n      }; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState.open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes = void 0;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _extends({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        processState('children', function (propValue) {\n          treeNodes = Array.isArray(propValue) ? propValue : [propValue];\n        });\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState.treeNodes = treeNodes;\n        newState.posEntities = entitiesMap.posEntities;\n        newState.valueEntities = entitiesMap.valueEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState.init) {\n        processState('defaultValue', function (propValue) {\n          newState.valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState.valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState.valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState.valueList), _toConsumableArray(prevState.missValueList));\n        } // Get key by value\n\n\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value;\n          var entity = (newState.valueEntities || prevState.valueEntities)[value];\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState.keyEntities || prevState.keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState.valueList = checkedKeys.map(function (key) {\n            return {\n              value: (newState.keyEntities || prevState.keyEntities)[key].value\n            };\n          });\n        } else {\n          newState.valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState.missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState.selectorValueList = formatSelectorValue(newState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState.searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState.searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState.searchValue !== undefined || prevState.searchValue && treeNodes) {\n        var searchValue = newState.searchValue !== undefined ? newState.searchValue : prevState.searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState.filteredTreeNodes = getFilterTree(newState.treeNodes || prevState.treeNodes, searchValue, filterTreeNodeFn, newState.valueEntities || prevState.valueEntities);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState.searchValue || prevState.searchValue)) {\n        newState.searchHalfCheckedKeys = getHalfCheckedKeys(newState.valueList, newState.valueEntities || prevState.valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState.selectorValueList = newState.selectorValueList || formatSelectorValue(newState.valueList || prevState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      });\n      return newState;\n    }\n  }]);\n\n  return Select;\n}(React.Component);\n\nSelect.propTypes = {\n  prefixCls: PropTypes.string,\n  prefixAria: PropTypes.string,\n  multiple: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  open: PropTypes.bool,\n  value: valueProp,\n  autoFocus: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  defaultValue: valueProp,\n  showSearch: PropTypes.bool,\n  placeholder: PropTypes.node,\n  inputValue: PropTypes.string,\n  // [Legacy] Deprecated. Use `searchValue` instead.\n  searchValue: PropTypes.string,\n  autoClearSearchValue: PropTypes.bool,\n  searchPlaceholder: PropTypes.node,\n  // [Legacy] Confuse with placeholder\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n  labelInValue: PropTypes.bool,\n  maxTagCount: PropTypes.number,\n  maxTagPlaceholder: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  dropdownMatchSelectWidth: PropTypes.bool,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  treeNodeFilterProp: PropTypes.string,\n  treeNodeLabelProp: PropTypes.string,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeDefaultExpandedKeys: PropTypes.array,\n  treeExpandedKeys: PropTypes.array,\n  loadData: PropTypes.func,\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  notFoundContent: PropTypes.string,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onChange: PropTypes.func,\n  onDropdownVisibleChange: PropTypes.func,\n  onTreeExpand: PropTypes.func,\n  inputIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  clearIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  removeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n};\nSelect.childContextTypes = {\n  rcTreeSelect: PropTypes.shape(_extends({}, selectorContextTypes, multipleSelectorContextTypes, popupContextTypes, {\n    onSearchInputChange: PropTypes.func,\n    onSearchInputKeyDown: PropTypes.func\n  }))\n};\nSelect.defaultProps = {\n  prefixCls: 'rc-tree-select',\n  prefixAria: 'rc-tree-select',\n  showArrow: true,\n  showSearch: true,\n  autoClearSearchValue: true,\n  showCheckedStrategy: SHOW_CHILD,\n  // dropdownMatchSelectWidth change the origin design, set to false now\n  // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n  // ref: https://github.com/react-component/select/pull/71\n  treeNodeFilterProp: 'value',\n  treeNodeLabelProp: 'title',\n  treeIcon: false,\n  notFoundContent: 'Not Found'\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onSelectorFocus = function () {\n    _this2.setState({\n      focused: true\n    });\n  };\n\n  this.onSelectorBlur = function () {\n    _this2.setState({\n      focused: false\n    }); // TODO: Close when Popup is also not focused\n    // this.setState({ open: false });\n\n  };\n\n  this.onComponentKeyDown = function (event) {\n    var open = _this2.state.open;\n    var keyCode = event.keyCode;\n\n    if (!open) {\n      if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n        _this2.setOpenState(true);\n      }\n    } else if (KeyCode.ESC === keyCode) {\n      _this2.setOpenState(false);\n    } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n      // TODO: Handle `open` state\n      event.stopPropagation();\n    }\n  };\n\n  this.onDeselect = function (wrappedValue, node, nodeEventInfo) {\n    var onDeselect = _this2.props.onDeselect;\n    if (!onDeselect) return;\n    onDeselect(wrappedValue, node, nodeEventInfo);\n  };\n\n  this.onSelectorClear = function (event) {\n    var disabled = _this2.props.disabled;\n    if (disabled) return;\n\n    _this2.triggerChange([], []);\n\n    if (!_this2.isSearchValueControlled()) {\n      _this2.setUncontrolledState({\n        searchValue: '',\n        filteredTreeNodes: null\n      });\n    }\n\n    event.stopPropagation();\n  };\n\n  this.onMultipleSelectorRemove = function (event, removeValue) {\n    event.stopPropagation();\n    var _state2 = _this2.state,\n        valueList = _state2.valueList,\n        missValueList = _state2.missValueList,\n        valueEntities = _state2.valueEntities;\n    var _props3 = _this2.props,\n        treeCheckable = _props3.treeCheckable,\n        treeCheckStrictly = _props3.treeCheckStrictly,\n        treeNodeLabelProp = _props3.treeNodeLabelProp,\n        disabled = _props3.disabled;\n    if (disabled) return; // Find trigger entity\n\n    var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n    var newValueList = valueList;\n\n    if (triggerEntity) {\n      // If value is in tree\n      if (treeCheckable && !treeCheckStrictly) {\n        newValueList = valueList.filter(function (_ref) {\n          var value = _ref.value;\n          var entity = valueEntities[value];\n          return !isPosRelated(entity.pos, triggerEntity.pos);\n        });\n      } else {\n        newValueList = valueList.filter(function (_ref2) {\n          var value = _ref2.value;\n          return value !== removeValue;\n        });\n      }\n    }\n\n    var triggerNode = triggerEntity ? triggerEntity.node : null;\n    var extraInfo = {\n      triggerValue: removeValue,\n      triggerNode: triggerNode\n    };\n    var deselectInfo = {\n      node: triggerNode\n    }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n    if (treeCheckable) {\n      var filteredEntityList = newValueList.map(function (_ref3) {\n        var value = _ref3.value;\n        return valueEntities[value];\n      });\n      deselectInfo.event = 'check';\n      deselectInfo.checked = false;\n      deselectInfo.checkedNodes = filteredEntityList.map(function (_ref4) {\n        var node = _ref4.node;\n        return node;\n      });\n      deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref5) {\n        var node = _ref5.node,\n            pos = _ref5.pos;\n        return {\n          node: node,\n          pos: pos\n        };\n      });\n\n      if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n      } else {\n        // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n        extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref6) {\n          var node = _ref6.node;\n          return node;\n        });\n      }\n    } else {\n      deselectInfo.event = 'select';\n      deselectInfo.selected = false;\n      deselectInfo.selectedNodes = newValueList.map(function (_ref7) {\n        var value = _ref7.value;\n        return (valueEntities[value] || {}).node;\n      });\n    } // Some value user pass prop is not in the tree, we also need clean it\n\n\n    var newMissValueList = missValueList.filter(function (_ref8) {\n      var value = _ref8.value;\n      return value !== removeValue;\n    });\n    var wrappedValue = void 0;\n\n    if (_this2.isLabelInValue()) {\n      wrappedValue = {\n        label: triggerNode ? triggerNode.props[treeNodeLabelProp] : null,\n        value: removeValue\n      };\n    } else {\n      wrappedValue = removeValue;\n    }\n\n    _this2.onDeselect(wrappedValue, triggerNode, deselectInfo);\n\n    _this2.triggerChange(newMissValueList, newValueList, extraInfo);\n  };\n\n  this.onValueTrigger = function (isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n    var node = nodeEventInfo.node;\n    var value = node.props.value;\n    var _state3 = _this2.state,\n        missValueList = _state3.missValueList,\n        valueEntities = _state3.valueEntities,\n        keyEntities = _state3.keyEntities,\n        searchValue = _state3.searchValue;\n    var _props4 = _this2.props,\n        disabled = _props4.disabled,\n        inputValue = _props4.inputValue,\n        treeNodeLabelProp = _props4.treeNodeLabelProp,\n        onSelect = _props4.onSelect,\n        onSearch = _props4.onSearch,\n        treeCheckable = _props4.treeCheckable,\n        treeCheckStrictly = _props4.treeCheckStrictly,\n        autoClearSearchValue = _props4.autoClearSearchValue;\n    var label = node.props[treeNodeLabelProp];\n    if (disabled) return; // Wrap the return value for user\n\n    var wrappedValue = void 0;\n\n    if (_this2.isLabelInValue()) {\n      wrappedValue = {\n        value: value,\n        label: label\n      };\n    } else {\n      wrappedValue = value;\n    } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n    if (isAdd) {\n      if (onSelect) {\n        onSelect(wrappedValue, node, nodeEventInfo);\n      }\n    } else {\n      _this2.onDeselect(wrappedValue, node, nodeEventInfo);\n    } // Get wrapped value list.\n    // This is a bit hack cause we use key to match the value.\n\n\n    var newValueList = nodeList.map(function (_ref9) {\n      var props = _ref9.props;\n      return {\n        value: props.value,\n        label: props[treeNodeLabelProp]\n      };\n    }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n    // We need calculate the missing nodes.\n\n    if (treeCheckable && !treeCheckStrictly) {\n      var keyList = newValueList.map(function (_ref10) {\n        var val = _ref10.value;\n        return valueEntities[val].key;\n      });\n\n      if (isAdd) {\n        keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n      } else {\n        keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n          checkedKeys: keyList\n        }).checkedKeys;\n      }\n\n      newValueList = keyList.map(function (key) {\n        var props = keyEntities[key].node.props;\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      });\n    } // Clean up `searchValue` when this prop is set\n\n\n    if (autoClearSearchValue || inputValue === null) {\n      // Clean state `searchValue` if uncontrolled\n      if (!_this2.isSearchValueControlled()) {\n        _this2.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      } // Trigger onSearch if `searchValue` to be empty.\n      // We should also trigger onSearch with empty string here\n      // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n      if (onSearch && searchValue && searchValue.length) {\n        onSearch('');\n      }\n    } // [Legacy] Provide extra info\n\n\n    var extraInfo = _extends({}, nodeExtraInfo, {\n      triggerValue: value,\n      triggerNode: node\n    });\n\n    _this2.triggerChange(missValueList, newValueList, extraInfo);\n  };\n\n  this.onTreeNodeSelect = function (_, nodeEventInfo) {\n    var _state4 = _this2.state,\n        valueList = _state4.valueList,\n        valueEntities = _state4.valueEntities;\n    var _props5 = _this2.props,\n        treeCheckable = _props5.treeCheckable,\n        multiple = _props5.multiple;\n    if (treeCheckable) return;\n\n    if (!multiple) {\n      _this2.setOpenState(false);\n    }\n\n    var isAdd = nodeEventInfo.selected;\n    var selectedValue = nodeEventInfo.node.props.value;\n    var newValueList = void 0;\n\n    if (!multiple) {\n      newValueList = [{\n        value: selectedValue\n      }];\n    } else {\n      newValueList = valueList.filter(function (_ref11) {\n        var value = _ref11.value;\n        return value !== selectedValue;\n      });\n\n      if (isAdd) {\n        newValueList.push({\n          value: selectedValue\n        });\n      }\n    }\n\n    var selectedNodes = newValueList.map(function (_ref12) {\n      var value = _ref12.value;\n      return valueEntities[value];\n    }).filter(function (entity) {\n      return entity;\n    }).map(function (_ref13) {\n      var node = _ref13.node;\n      return node;\n    });\n\n    _this2.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n      selected: isAdd\n    });\n  };\n\n  this.onTreeNodeCheck = function (_, nodeEventInfo) {\n    var _state5 = _this2.state,\n        searchValue = _state5.searchValue,\n        keyEntities = _state5.keyEntities,\n        valueEntities = _state5.valueEntities,\n        valueList = _state5.valueList;\n    var treeCheckStrictly = _this2.props.treeCheckStrictly;\n    var checkedNodes = nodeEventInfo.checkedNodes,\n        checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n    var isAdd = nodeEventInfo.checked;\n    var extraInfo = {\n      checked: isAdd\n    };\n    var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n    // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n    // - Related: Show the top checked nodes and has children prop.\n    // - Unrelated: Show all the checked nodes.\n\n    if (searchValue) {\n      var oriKeyList = valueList.map(function (_ref14) {\n        var value = _ref14.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref15) {\n        var key = _ref15.key;\n        return key;\n      });\n      var keyList = void 0;\n\n      if (isAdd) {\n        keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (_ref16) {\n          var value = _ref16.props.value;\n          return valueEntities[value].key;\n        })))));\n      } else {\n        keyList = conductCheck([nodeEventInfo.node.props.eventKey], false, keyEntities, {\n          checkedKeys: oriKeyList\n        }).checkedKeys;\n      }\n\n      checkedNodeList = keyList.map(function (key) {\n        return keyEntities[key].node;\n      }); // Let's follow as not `treeCheckStrictly` format\n\n      extraInfo.allCheckedNodes = keyList.map(function (key) {\n        return cleanEntity(keyEntities[key]);\n      });\n    } else if (treeCheckStrictly) {\n      extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n    } else {\n      extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n    }\n\n    _this2.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n  };\n\n  this.onDropdownVisibleChange = function (open) {\n    _this2.setOpenState(open, true);\n  };\n\n  this.onSearchInputChange = function (_ref17) {\n    var value = _ref17.target.value;\n    var _state6 = _this2.state,\n        treeNodes = _state6.treeNodes,\n        valueEntities = _state6.valueEntities;\n    var _props6 = _this2.props,\n        onSearch = _props6.onSearch,\n        filterTreeNode = _props6.filterTreeNode,\n        treeNodeFilterProp = _props6.treeNodeFilterProp;\n\n    if (onSearch) {\n      onSearch(value);\n    }\n\n    var isSet = false;\n\n    if (!_this2.isSearchValueControlled()) {\n      isSet = _this2.setUncontrolledState({\n        searchValue: value\n      });\n\n      _this2.setOpenState(true);\n    }\n\n    if (isSet) {\n      // Do the search logic\n      var upperSearchValue = String(value).toUpperCase();\n      var filterTreeNodeFn = filterTreeNode;\n\n      if (!filterTreeNodeFn) {\n        filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n          var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n          return nodeValue.indexOf(upperSearchValue) !== -1;\n        };\n      }\n\n      _this2.setState({\n        filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities)\n      });\n    }\n  };\n\n  this.onSearchInputKeyDown = function (event) {\n    var _state7 = _this2.state,\n        searchValue = _state7.searchValue,\n        valueList = _state7.valueList;\n    var keyCode = event.keyCode;\n\n    if (KeyCode.BACKSPACE === keyCode && _this2.isMultiple() && !searchValue && valueList.length) {\n      var lastValue = valueList[valueList.length - 1].value;\n\n      _this2.onMultipleSelectorRemove(event, lastValue);\n    }\n  };\n\n  this.onChoiceAnimationLeave = function () {\n    _this2.forcePopupAlign();\n  };\n\n  this.setUncontrolledState = function (state) {\n    var needSync = false;\n    var newState = {};\n    Object.keys(state).forEach(function (name) {\n      if (name in _this2.props) return;\n      needSync = true;\n      newState[name] = state[name];\n    });\n\n    if (needSync) {\n      _this2.setState(newState);\n    }\n\n    return needSync;\n  };\n\n  this.setOpenState = function (open) {\n    var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var onDropdownVisibleChange = _this2.props.onDropdownVisibleChange;\n\n    if (onDropdownVisibleChange && onDropdownVisibleChange(open, {\n      documentClickClose: !open && byTrigger\n    }) === false) {\n      return;\n    }\n\n    _this2.setUncontrolledState({\n      open: open\n    });\n  };\n\n  this.isMultiple = function () {\n    var _props7 = _this2.props,\n        multiple = _props7.multiple,\n        treeCheckable = _props7.treeCheckable;\n    return !!(multiple || treeCheckable);\n  };\n\n  this.isLabelInValue = function () {\n    return isLabelInValue(_this2.props);\n  };\n\n  this.isSearchValueControlled = function () {\n    var inputValue = _this2.props.inputValue;\n    if ('searchValue' in _this2.props) return true;\n    return 'inputValue' in _this2.props && inputValue !== null;\n  };\n\n  this.forcePopupAlign = function () {\n    var $trigger = _this2.selectTriggerRef.current;\n\n    if ($trigger) {\n      $trigger.forcePopupAlign();\n    }\n  };\n\n  this.delayForcePopupAlign = function () {\n    // Wait 2 frame to avoid dom update & dom algin in the same time\n    // https://github.com/ant-design/ant-design/issues/12031\n    raf(function () {\n      raf(_this2.forcePopupAlign);\n    });\n  };\n\n  this.triggerChange = function (missValueList, valueList) {\n    var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _state8 = _this2.state,\n        valueEntities = _state8.valueEntities,\n        searchValue = _state8.searchValue;\n    var _props8 = _this2.props,\n        onChange = _props8.onChange,\n        disabled = _props8.disabled,\n        treeCheckable = _props8.treeCheckable,\n        treeCheckStrictly = _props8.treeCheckStrictly;\n    if (disabled) return; // Trigger\n\n    var extra = _extends({\n      // [Legacy] Always return as array contains label & value\n      preValue: _this2.state.selectorValueList.map(function (_ref18) {\n        var label = _ref18.label,\n            value = _ref18.value;\n        return {\n          label: label,\n          value: value\n        };\n      })\n    }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n    var selectorValueList = formatSelectorValue(valueList, _this2.props, valueEntities);\n\n    if (!('value' in _this2.props)) {\n      var newState = {\n        missValueList: missValueList,\n        valueList: valueList,\n        selectorValueList: selectorValueList\n      };\n\n      if (searchValue && treeCheckable && !treeCheckStrictly) {\n        newState.searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n      }\n\n      _this2.setState(newState);\n    } // Only do the logic when `onChange` function provided\n\n\n    if (onChange) {\n      var connectValueList = void 0; // Get value by mode\n\n      if (_this2.isMultiple()) {\n        connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n      } else {\n        connectValueList = selectorValueList.slice(0, 1);\n      }\n\n      var labelList = null;\n      var returnValue = void 0;\n\n      if (_this2.isLabelInValue()) {\n        returnValue = connectValueList.map(function (_ref19) {\n          var label = _ref19.label,\n              value = _ref19.value;\n          return {\n            label: label,\n            value: value\n          };\n        });\n      } else {\n        labelList = [];\n        returnValue = connectValueList.map(function (_ref20) {\n          var label = _ref20.label,\n              value = _ref20.value;\n          labelList.push(label);\n          return value;\n        });\n      }\n\n      if (!_this2.isMultiple()) {\n        returnValue = returnValue[0];\n      }\n\n      onChange(returnValue, labelList, extra);\n    }\n  };\n};\n\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.displayName = 'TreeSelect';\npolyfill(Select);\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}